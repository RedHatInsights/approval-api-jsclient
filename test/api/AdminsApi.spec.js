/**
 * Insights Service Approval APIs
 * APIs to query approval service
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InsightsServiceApprovalApIs);
  }
}(this, function(expect, InsightsServiceApprovalApIs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InsightsServiceApprovalApIs.AdminsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AdminsApi', function() {
    describe('addGroup', function() {
      it('should call addGroup successfully', function(done) {
        //uncomment below and update the code to test addGroup
        //instance.addGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addUser', function() {
      it('should call addUser successfully', function(done) {
        //uncomment below and update the code to test addUser
        //instance.addUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addWorkflow', function() {
      it('should call addWorkflow successfully', function(done) {
        //uncomment below and update the code to test addWorkflow
        //instance.addWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchGroupById', function() {
      it('should call fetchGroupById successfully', function(done) {
        //uncomment below and update the code to test fetchGroupById
        //instance.fetchGroupById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchGroups', function() {
      it('should call fetchGroups successfully', function(done) {
        //uncomment below and update the code to test fetchGroups
        //instance.fetchGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchGroupsByUserId', function() {
      it('should call fetchGroupsByUserId successfully', function(done) {
        //uncomment below and update the code to test fetchGroupsByUserId
        //instance.fetchGroupsByUserId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchGroupsByWorkflowId', function() {
      it('should call fetchGroupsByWorkflowId successfully', function(done) {
        //uncomment below and update the code to test fetchGroupsByWorkflowId
        //instance.fetchGroupsByWorkflowId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchRequestsByUserId', function() {
      it('should call fetchRequestsByUserId successfully', function(done) {
        //uncomment below and update the code to test fetchRequestsByUserId
        //instance.fetchRequestsByUserId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchStageById', function() {
      it('should call fetchStageById successfully', function(done) {
        //uncomment below and update the code to test fetchStageById
        //instance.fetchStageById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchTemplateById', function() {
      it('should call fetchTemplateById successfully', function(done) {
        //uncomment below and update the code to test fetchTemplateById
        //instance.fetchTemplateById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchTemplateWorkflows', function() {
      it('should call fetchTemplateWorkflows successfully', function(done) {
        //uncomment below and update the code to test fetchTemplateWorkflows
        //instance.fetchTemplateWorkflows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchTemplates', function() {
      it('should call fetchTemplates successfully', function(done) {
        //uncomment below and update the code to test fetchTemplates
        //instance.fetchTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchUserById', function() {
      it('should call fetchUserById successfully', function(done) {
        //uncomment below and update the code to test fetchUserById
        //instance.fetchUserById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchUsers', function() {
      it('should call fetchUsers successfully', function(done) {
        //uncomment below and update the code to test fetchUsers
        //instance.fetchUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchUsersByGroupId', function() {
      it('should call fetchUsersByGroupId successfully', function(done) {
        //uncomment below and update the code to test fetchUsersByGroupId
        //instance.fetchUsersByGroupId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchWorkflowById', function() {
      it('should call fetchWorkflowById successfully', function(done) {
        //uncomment below and update the code to test fetchWorkflowById
        //instance.fetchWorkflowById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchWorkflowRequests', function() {
      it('should call fetchWorkflowRequests successfully', function(done) {
        //uncomment below and update the code to test fetchWorkflowRequests
        //instance.fetchWorkflowRequests(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchWorkflows', function() {
      it('should call fetchWorkflows successfully', function(done) {
        //uncomment below and update the code to test fetchWorkflows
        //instance.fetchWorkflows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupOperation', function() {
      it('should call groupOperation successfully', function(done) {
        //uncomment below and update the code to test groupOperation
        //instance.groupOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeGroup', function() {
      it('should call removeGroup successfully', function(done) {
        //uncomment below and update the code to test removeGroup
        //instance.removeGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeUser', function() {
      it('should call removeUser successfully', function(done) {
        //uncomment below and update the code to test removeUser
        //instance.removeUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeWorkflow', function() {
      it('should call removeWorkflow successfully', function(done) {
        //uncomment below and update the code to test removeWorkflow
        //instance.removeWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGroup', function() {
      it('should call updateGroup successfully', function(done) {
        //uncomment below and update the code to test updateGroup
        //instance.updateGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUser', function() {
      it('should call updateUser successfully', function(done) {
        //uncomment below and update the code to test updateUser
        //instance.updateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkflow', function() {
      it('should call updateWorkflow successfully', function(done) {
        //uncomment below and update the code to test updateWorkflow
        //instance.updateWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
