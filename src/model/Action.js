/**
 * Insights Service Approval APIs
 * APIs to query approval service
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Action model module.
 * @module model/Action
 * @version 1.0.0
 */
class Action {
    /**
     * Constructs a new <code>Action</code>.
     * Action is kind of like processing record. Each stage may have many actions before final decision.
     * @alias module:model/Action
     * @param processedBy {String} Processor info who perform the action
     */
    constructor(processedBy) { 
        
        Action.initialize(this, processedBy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, processedBy) { 
        obj['processed_by'] = processedBy;
    }

    /**
     * Constructs a <code>Action</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Action} obj Optional instance to populate.
     * @return {module:model/Action} The populated <code>Action</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Action();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('processed_by')) {
                obj['processed_by'] = ApiClient.convertToType(data['processed_by'], 'String');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('stage_id')) {
                obj['stage_id'] = ApiClient.convertToType(data['stage_id'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
Action.prototype['id'] = undefined;

/**
 * Processor info who perform the action
 * @member {String} processed_by
 */
Action.prototype['processed_by'] = undefined;

/**
 * Types of action, may be one of the value (approve, deny, notify, memo, or skip). The stage will be updated according to the operation.
 * @member {module:model/Action.OperationEnum} operation
 * @default 'memo'
 */
Action.prototype['operation'] = 'memo';

/**
 * Associated stage id
 * @member {String} stage_id
 */
Action.prototype['stage_id'] = undefined;

/**
 * Comments for action
 * @member {String} comments
 */
Action.prototype['comments'] = undefined;

/**
 * Timestamp of creation
 * @member {Date} created_at
 */
Action.prototype['created_at'] = undefined;





/**
 * Allowed values for the <code>operation</code> property.
 * @enum {String}
 * @readonly
 */
Action['OperationEnum'] = {

    /**
     * value: "approve"
     * @const
     */
    "approve": "approve",

    /**
     * value: "deny"
     * @const
     */
    "deny": "deny",

    /**
     * value: "notify"
     * @const
     */
    "notify": "notify",

    /**
     * value: "memo"
     * @const
     */
    "memo": "memo",

    /**
     * value: "skip"
     * @const
     */
    "skip": "skip"
};



export default Action;

