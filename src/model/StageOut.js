/**
 * Insights Service Approval APIs
 * APIs to query approval service
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateTime from './DateTime';

/**
 * The StageOut model module.
 * @module model/StageOut
 * @version 1.0.0
 */
class StageOut {
    /**
     * Constructs a new <code>StageOut</code>.
     * A stage of an approval request.
     * @alias module:model/StageOut
     */
    constructor() { 
        
        StageOut.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StageOut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StageOut} obj Optional instance to populate.
     * @return {module:model/StageOut} The populated <code>StageOut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StageOut();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('decision')) {
                obj['decision'] = ApiClient.convertToType(data['decision'], 'String');
            }
            if (data.hasOwnProperty('notified_at')) {
                obj['notified_at'] = ApiClient.convertToType(data['notified_at'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
StageOut.prototype['id'] = undefined;

/**
 * name of the group that processes the stage
 * @member {String} name
 */
StageOut.prototype['name'] = undefined;

/**
 * Associated group id
 * @member {String} group_id
 */
StageOut.prototype['group_id'] = undefined;

/**
 * The state of stage or request. It may be one of values (pending, skipped, notified or finished)
 * @member {module:model/StageOut.StateEnum} state
 * @default 'pending'
 */
StageOut.prototype['state'] = 'pending';

/**
 * Final decision, may be one of the value (undecided, approved, or denied)
 * @member {module:model/StageOut.DecisionEnum} decision
 * @default 'undecided'
 */
StageOut.prototype['decision'] = 'undecided';

/**
 * the time approvers in the stage are notified
 * @member {module:model/Date} notified_at
 */
StageOut.prototype['notified_at'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
StageOut['StateEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "skipped"
     * @const
     */
    "skipped": "skipped",

    /**
     * value: "notified"
     * @const
     */
    "notified": "notified",

    /**
     * value: "finished"
     * @const
     */
    "finished": "finished"
};


/**
 * Allowed values for the <code>decision</code> property.
 * @enum {String}
 * @readonly
 */
StageOut['DecisionEnum'] = {

    /**
     * value: "undecided"
     * @const
     */
    "undecided": "undecided",

    /**
     * value: "approved"
     * @const
     */
    "approved": "approved",

    /**
     * value: "denied"
     * @const
     */
    "denied": "denied"
};



export default StageOut;

