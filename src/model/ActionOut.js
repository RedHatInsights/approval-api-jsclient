/**
 * Insights Service Approval APIs
 * APIs to query approval service
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionIn from './ActionIn';

/**
 * The ActionOut model module.
 * @module model/ActionOut
 * @version 1.0.0
 */
class ActionOut {
    /**
     * Constructs a new <code>ActionOut</code>.
     * @alias module:model/ActionOut
     * @extends module:model/ActionIn
     * @implements module:model/ActionIn
     * @param processedBy {} Processor info who perform the action
     * @param operation {} Types of action, may be one of the value (approve, deny, notify, memo, or skip). The stage will be updated according to the operation.
     */
    constructor(processedBy, operation) { 
        ActionIn.initialize(this, processedBy, operation);
        ActionOut.initialize(this, processedBy, operation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, processedBy, operation) { 
    }

    /**
     * Constructs a <code>ActionOut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActionOut} obj Optional instance to populate.
     * @return {module:model/ActionOut} The populated <code>ActionOut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActionOut();
            ActionIn.constructFromObject(data, obj);
            ActionIn.constructFromObject(data, obj);

        }
        return obj;
    }


}


// Implement ActionIn interface:
/**
 * Processor info who perform the action
 * @member {String} processed_by
 */
ActionIn.prototype['processed_by'] = undefined;
/**
 * Types of action, may be one of the value (approve, deny, notify, memo, or skip). The stage will be updated according to the operation.
 * @member {module:model/ActionIn.OperationEnum} operation
 * @default 'memo'
 */
ActionIn.prototype['operation'] = 'memo';




export default ActionOut;

