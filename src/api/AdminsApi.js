/**
 * Insights Service Approval APIs
 * APIs to query approval service
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionIn from '../model/ActionIn';
import ActionOut from '../model/ActionOut';
import GroupIn from '../model/GroupIn';
import GroupOperationIn from '../model/GroupOperationIn';
import GroupOut from '../model/GroupOut';
import RequestOut from '../model/RequestOut';
import StageOut from '../model/StageOut';
import TemplateOut from '../model/TemplateOut';
import UserIn from '../model/UserIn';
import UserOut from '../model/UserOut';
import Workflow from '../model/Workflow';
import WorkflowIn from '../model/WorkflowIn';
import WorkflowOut from '../model/WorkflowOut';

/**
* Admins service.
* @module api/AdminsApi
* @version 1.0.0
*/
export default class AdminsApi {

    /**
    * Constructs a new AdminsApi. 
    * @alias module:api/AdminsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add an action to a given stage
     * Add an action to a given stage
     * @param {Number} stageId Id of stage
     * @param {module:model/ActionIn} actionIn Action object that will be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActionOut} and HTTP response
     */
    addActionWithHttpInfo(stageId, actionIn) {
      let postBody = actionIn;

      // verify the required parameter 'stageId' is set
      if (stageId === undefined || stageId === null) {
        throw new Error("Missing the required parameter 'stageId' when calling addAction");
      }

      // verify the required parameter 'actionIn' is set
      if (actionIn === undefined || actionIn === null) {
        throw new Error("Missing the required parameter 'actionIn' when calling addAction");
      }


      let pathParams = {
        'stage_id': stageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionOut;

      return this.apiClient.callApi(
        '/stages/{stage_id}/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add an action to a given stage
     * Add an action to a given stage
     * @param {Number} stageId Id of stage
     * @param {module:model/ActionIn} actionIn Action object that will be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActionOut}
     */
    addAction(stageId, actionIn) {
      return this.addActionWithHttpInfo(stageId, actionIn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add an action to a given request
     * Add an action to a given request
     * @param {Number} requestId Id of request
     * @param {module:model/ActionIn} actionIn Action object that will be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActionOut} and HTTP response
     */
    addActionByRequestIdWithHttpInfo(requestId, actionIn) {
      let postBody = actionIn;

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling addActionByRequestId");
      }

      // verify the required parameter 'actionIn' is set
      if (actionIn === undefined || actionIn === null) {
        throw new Error("Missing the required parameter 'actionIn' when calling addActionByRequestId");
      }


      let pathParams = {
        'request_id': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionOut;

      return this.apiClient.callApi(
        '/requests/{request_id}/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add an action to a given request
     * Add an action to a given request
     * @param {Number} requestId Id of request
     * @param {module:model/ActionIn} actionIn Action object that will be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActionOut}
     */
    addActionByRequestId(requestId, actionIn) {
      return this.addActionByRequestIdWithHttpInfo(requestId, actionIn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new user group by given parameters
     * Add a new user group by given parameters
     * @param {module:model/GroupIn} groupIn Parameters need to create user group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupOut} and HTTP response
     */
    addGroupWithHttpInfo(groupIn) {
      let postBody = groupIn;

      // verify the required parameter 'groupIn' is set
      if (groupIn === undefined || groupIn === null) {
        throw new Error("Missing the required parameter 'groupIn' when calling addGroup");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupOut;

      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new user group by given parameters
     * Add a new user group by given parameters
     * @param {module:model/GroupIn} groupIn Parameters need to create user group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupOut}
     */
    addGroup(groupIn) {
      return this.addGroupWithHttpInfo(groupIn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new user by given parameters
     * Add a new user by given parameters
     * @param {module:model/UserIn} userIn Parameters need to create user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserOut} and HTTP response
     */
    addUserWithHttpInfo(userIn) {
      let postBody = userIn;

      // verify the required parameter 'userIn' is set
      if (userIn === undefined || userIn === null) {
        throw new Error("Missing the required parameter 'userIn' when calling addUser");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserOut;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new user by given parameters
     * Add a new user by given parameters
     * @param {module:model/UserIn} userIn Parameters need to create user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserOut}
     */
    addUser(userIn) {
      return this.addUserWithHttpInfo(userIn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a workflow by given template id
     * Add a workflow by given template id
     * @param {Number} templateId Id of template
     * @param {module:model/WorkflowIn} workflowIn Parameters need to create workflow
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkflowOut} and HTTP response
     */
    addWorkflowWithHttpInfo(templateId, workflowIn) {
      let postBody = workflowIn;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling addWorkflow");
      }

      // verify the required parameter 'workflowIn' is set
      if (workflowIn === undefined || workflowIn === null) {
        throw new Error("Missing the required parameter 'workflowIn' when calling addWorkflow");
      }


      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowOut;

      return this.apiClient.callApi(
        '/templates/{template_id}/workflows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a workflow by given template id
     * Add a workflow by given template id
     * @param {Number} templateId Id of template
     * @param {module:model/WorkflowIn} workflowIn Parameters need to create workflow
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkflowOut}
     */
    addWorkflow(templateId, workflowIn) {
      return this.addWorkflowWithHttpInfo(templateId, workflowIn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return an user action by id
     * Return an user action by id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActionOut} and HTTP response
     */
    fetchActionByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchActionById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ActionOut;

      return this.apiClient.callApi(
        '/actions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return an user action by id
     * Return an user action by id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActionOut}
     */
    fetchActionById(id) {
      return this.fetchActionByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return a list of user actions
     * Return a list of user actions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ActionOut>} and HTTP response
     */
    fetchActionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActionOut];

      return this.apiClient.callApi(
        '/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return a list of user actions
     * Return a list of user actions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ActionOut>}
     */
    fetchActions(opts) {
      return this.fetchActionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return user group by given id
     * Return user group by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupOut} and HTTP response
     */
    fetchGroupByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchGroupById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GroupOut;

      return this.apiClient.callApi(
        '/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return user group by given id
     * Return user group by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupOut}
     */
    fetchGroupById(id) {
      return this.fetchGroupByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return all user groups
     * Return all user groups
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GroupOut>} and HTTP response
     */
    fetchGroupsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupOut];

      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return all user groups
     * Return all user groups
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GroupOut>}
     */
    fetchGroups(opts) {
      return this.fetchGroupsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return associated groups by given user id
     * Return groups by given user id
     * @param {Number} userId Id of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GroupOut>} and HTTP response
     */
    fetchGroupsByUserIdWithHttpInfo(userId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling fetchGroupsByUserId");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupOut];

      return this.apiClient.callApi(
        '/users/{user_id}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return associated groups by given user id
     * Return groups by given user id
     * @param {Number} userId Id of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GroupOut>}
     */
    fetchGroupsByUserId(userId) {
      return this.fetchGroupsByUserIdWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return an array of approval requests
     * Return an array of requests
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.decision Fetch item by given decision (undecided, approved, denied)
     * @param {Array.<module:model/String>} opts.state Fetch item by given state (pending, skipped, notified, finished)
     * @param {String} opts.requester Fetch item by given requester
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RequestOut>} and HTTP response
     */
    fetchRequestsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'decision': this.apiClient.buildCollectionParam(opts['decision'], 'csv'),
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'requester': opts['requester'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RequestOut];

      return this.apiClient.callApi(
        '/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return an array of approval requests
     * Return an array of requests
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.decision Fetch item by given decision (undecided, approved, denied)
     * @param {Array.<module:model/String>} opts.state Fetch item by given state (pending, skipped, notified, finished)
     * @param {String} opts.requester Fetch item by given requester
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/RequestOut>}
     */
    fetchRequests(opts) {
      return this.fetchRequestsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return associated requests by given user id
     * Return requests by given user id
     * @param {Number} userId Id of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RequestOut>} and HTTP response
     */
    fetchRequestsByUserIdWithHttpInfo(userId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling fetchRequestsByUserId");
      }


      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RequestOut];

      return this.apiClient.callApi(
        '/users/{user_id}/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return associated requests by given user id
     * Return requests by given user id
     * @param {Number} userId Id of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/RequestOut>}
     */
    fetchRequestsByUserId(userId) {
      return this.fetchRequestsByUserIdWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return an approval stage by given id
     * Return an approval stage by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StageOut} and HTTP response
     */
    fetchStageByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchStageById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StageOut;

      return this.apiClient.callApi(
        '/stages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return an approval stage by given id
     * Return an approval stage by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StageOut}
     */
    fetchStageById(id) {
      return this.fetchStageByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return all approval stages
     * Return all approval stages
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/StageOut>} and HTTP response
     */
    fetchStagesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [StageOut];

      return this.apiClient.callApi(
        '/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return all approval stages
     * Return all approval stages
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/StageOut>}
     */
    fetchStages(opts) {
      return this.fetchStagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return a template by given id
     * Return a template by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateOut} and HTTP response
     */
    fetchTemplateByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchTemplateById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TemplateOut;

      return this.apiClient.callApi(
        '/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return a template by given id
     * Return a template by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateOut}
     */
    fetchTemplateById(id) {
      return this.fetchTemplateByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return an array of workflows by given template id
     * Return an array of workflows by given template id
     * @param {Number} templateId Id of template
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WorkflowOut>} and HTTP response
     */
    fetchTemplateWorkflowsWithHttpInfo(templateId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling fetchTemplateWorkflows");
      }


      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkflowOut];

      return this.apiClient.callApi(
        '/templates/{template_id}/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return an array of workflows by given template id
     * Return an array of workflows by given template id
     * @param {Number} templateId Id of template
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WorkflowOut>}
     */
    fetchTemplateWorkflows(templateId, opts) {
      return this.fetchTemplateWorkflowsWithHttpInfo(templateId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return all templates
     * Return all templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TemplateOut>} and HTTP response
     */
    fetchTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TemplateOut];

      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return all templates
     * Return all templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TemplateOut>}
     */
    fetchTemplates(opts) {
      return this.fetchTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return user by given id
     * Return user by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserOut} and HTTP response
     */
    fetchUserByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchUserById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserOut;

      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return user by given id
     * Return user by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserOut}
     */
    fetchUserById(id) {
      return this.fetchUserByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return a list of users
     * Return a list of users
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UserOut>} and HTTP response
     */
    fetchUsersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserOut];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return a list of users
     * Return a list of users
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UserOut>}
     */
    fetchUsers(opts) {
      return this.fetchUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return associated users by given group id
     * Return users by given group id
     * @param {Number} groupId Id of group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UserOut>} and HTTP response
     */
    fetchUsersByGroupIdWithHttpInfo(groupId) {
      let postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling fetchUsersByGroupId");
      }


      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserOut];

      return this.apiClient.callApi(
        '/groups/{group_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return associated users by given group id
     * Return users by given group id
     * @param {Number} groupId Id of group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UserOut>}
     */
    fetchUsersByGroupId(groupId) {
      return this.fetchUsersByGroupIdWithHttpInfo(groupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return an approval workflow by given id
     * Return an approval workflow by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkflowOut} and HTTP response
     */
    fetchWorkflowByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchWorkflowById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = WorkflowOut;

      return this.apiClient.callApi(
        '/workflows/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return an approval workflow by given id
     * Return an approval workflow by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkflowOut}
     */
    fetchWorkflowById(id) {
      return this.fetchWorkflowByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return approval requests by given workflow id
     * Return approval requests by given workflow id
     * @param {Number} workflowId Id of workflow
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RequestOut>} and HTTP response
     */
    fetchWorkflowRequestsWithHttpInfo(workflowId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling fetchWorkflowRequests");
      }


      let pathParams = {
        'workflow_id': workflowId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RequestOut];

      return this.apiClient.callApi(
        '/workflows/{workflow_id}/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return approval requests by given workflow id
     * Return approval requests by given workflow id
     * @param {Number} workflowId Id of workflow
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/RequestOut>}
     */
    fetchWorkflowRequests(workflowId, opts) {
      return this.fetchWorkflowRequestsWithHttpInfo(workflowId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return all approval workflows
     * Return all approval workflows
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WorkflowOut>} and HTTP response
     */
    fetchWorkflowsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [WorkflowOut];

      return this.apiClient.callApi(
        '/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return all approval workflows
     * Return all approval workflows
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WorkflowOut>}
     */
    fetchWorkflows(opts) {
      return this.fetchWorkflowsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Operation on a list of users to a given group
     * Users join in or withdraw from a given group
     * @param {Number} id Query by id
     * @param {module:model/GroupOperationIn} groupOperationIn Parameters need to operate groups
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupOut} and HTTP response
     */
    groupOperationWithHttpInfo(id, groupOperationIn) {
      let postBody = groupOperationIn;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupOperation");
      }

      // verify the required parameter 'groupOperationIn' is set
      if (groupOperationIn === undefined || groupOperationIn === null) {
        throw new Error("Missing the required parameter 'groupOperationIn' when calling groupOperation");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupOut;

      return this.apiClient.callApi(
        '/groups/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Operation on a list of users to a given group
     * Users join in or withdraw from a given group
     * @param {Number} id Query by id
     * @param {module:model/GroupOperationIn} groupOperationIn Parameters need to operate groups
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupOut}
     */
    groupOperation(id, groupOperationIn) {
      return this.groupOperationWithHttpInfo(id, groupOperationIn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete user group by given id
     * Delete group by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeGroupWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeGroup");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete user group by given id
     * Delete group by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeGroup(id) {
      return this.removeGroupWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete user by given id
     * Delete user by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeUserWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeUser");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete user by given id
     * Delete user by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeUser(id) {
      return this.removeUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete approval workflow by given id
     * Delete approval workflow by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeWorkflowWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeWorkflow");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/workflows/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete approval workflow by given id
     * Delete approval workflow by given id
     * @param {Number} id Query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeWorkflow(id) {
      return this.removeWorkflowWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an user group by given id
     * Update an user group by given id
     * @param {Number} id Query by id
     * @param {module:model/GroupIn} groupIn User group object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateGroupWithHttpInfo(id, groupIn) {
      let postBody = groupIn;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroup");
      }

      // verify the required parameter 'groupIn' is set
      if (groupIn === undefined || groupIn === null) {
        throw new Error("Missing the required parameter 'groupIn' when calling updateGroup");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/groups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an user group by given id
     * Update an user group by given id
     * @param {Number} id Query by id
     * @param {module:model/GroupIn} groupIn User group object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateGroup(id, groupIn) {
      return this.updateGroupWithHttpInfo(id, groupIn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an user by given id
     * Update an user by given id
     * @param {Number} id Query by id
     * @param {module:model/UserIn} userIn User object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateUserWithHttpInfo(id, userIn) {
      let postBody = userIn;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUser");
      }

      // verify the required parameter 'userIn' is set
      if (userIn === undefined || userIn === null) {
        throw new Error("Missing the required parameter 'userIn' when calling updateUser");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an user by given id
     * Update an user by given id
     * @param {Number} id Query by id
     * @param {module:model/UserIn} userIn User object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateUser(id, userIn) {
      return this.updateUserWithHttpInfo(id, userIn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an approval workflow by given id
     * Update an approval workflow by given id
     * @param {Number} id Query by id
     * @param {module:model/WorkflowIn} workflowIn Parameters need to update approval workflow
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateWorkflowWithHttpInfo(id, workflowIn) {
      let postBody = workflowIn;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorkflow");
      }

      // verify the required parameter 'workflowIn' is set
      if (workflowIn === undefined || workflowIn === null) {
        throw new Error("Missing the required parameter 'workflowIn' when calling updateWorkflow");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/workflows/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an approval workflow by given id
     * Update an approval workflow by given id
     * @param {Number} id Query by id
     * @param {module:model/WorkflowIn} workflowIn Parameters need to update approval workflow
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateWorkflow(id, workflowIn) {
      return this.updateWorkflowWithHttpInfo(id, workflowIn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
